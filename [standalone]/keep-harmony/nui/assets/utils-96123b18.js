function f(r){return r.type==="group"}function o(r){return r.type==="ignored"}function p(r,t){try{return!!(1+t.toString().toLowerCase().indexOf(r.trim().toLowerCase()))}catch{return!1}}function g(r,t){return{getIsGroup:f,getIgnored:o,getKey(e){return f(e)?e.name||e.key||"key-required":e[r]},getChildren(e){return e[t]}}}function h(r,t,u,e){if(!t)return r;function n(a){if(!Array.isArray(a))return[];const c=[];for(const s of a)if(f(s)){const i=n(s[e]);i.length&&c.push(Object.assign({},s,{[e]:i}))}else{if(o(s))continue;t(u,s)&&c.push(s)}return c}return n(r)}function y(r,t,u){const e=new Map;return r.forEach(n=>{f(n)?n[u].forEach(a=>{e.set(a[t],a)}):e.set(n[t],n)}),e}export{y as a,g as c,h as f,p};
